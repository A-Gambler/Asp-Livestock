// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using livestock.Data;

namespace LiveStok.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190413235917_UserIsAdministrator")]
    partial class UserIsAdministrator
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("livestock.Models.Agent", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Hide");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Agent");

                    b.HasData(
                        new { ID = new Guid("f197a2b8-2c2c-4793-9f5f-e9c66188029d"), Hide = false, Name = "ROBERTS" },
                        new { ID = new Guid("6b34fbce-2b44-46fb-9d7a-e5afa2428afc"), Hide = false, Name = "DEGARIS" },
                        new { ID = new Guid("7661bae2-d8be-4b9b-8c18-f4b82bb7e788"), Hide = false, Name = "DIRECT" },
                        new { ID = new Guid("1b999108-2ddb-4bbd-8d2b-f35a2ebd8c30"), Hide = false, Name = "MKT" }
                    );
                });

            modelBuilder.Entity("livestock.Models.Buyer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<bool>("Hide");

                    b.HasKey("ID");

                    b.ToTable("Buyer");

                    b.HasData(
                        new { ID = new Guid("24aafc27-b78a-436b-991f-676fa6998f41"), Code = "AT", Hide = false },
                        new { ID = new Guid("c2caed27-70f8-41ae-80b1-fa6f2e12210d"), Code = "GA", Hide = false },
                        new { ID = new Guid("6abab1df-f969-43a7-8666-69c2ea6abb17"), Code = "GC", Hide = false },
                        new { ID = new Guid("42302447-7e0f-41be-9dca-a5507ec97fb3"), Code = "GS", Hide = false },
                        new { ID = new Guid("aa27d3af-c310-4715-8cb3-8901c8af7611"), Code = "MS", Hide = false }
                    );
                });

            modelBuilder.Entity("livestock.Models.BuyType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("BuyTypes");

                    b.HasData(
                        new { ID = new Guid("d180ff28-1321-467a-a0de-d7955d463762"), Name = "Private Buy" },
                        new { ID = new Guid("29dec9c6-c2c3-4603-9c37-3256ab99215a"), Name = "Market Buy" },
                        new { ID = new Guid("196d17bd-5320-47da-9d44-57ff705c18b9"), Name = "Hooks Buy" }
                    );
                });

            modelBuilder.Entity("livestock.Models.Location", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Hide");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Locationts");

                    b.HasData(
                        new { ID = new Guid("0afd5f6c-128d-4a76-8c0f-5959d142f2cd"), Hide = false, Name = "TASMANIA" },
                        new { ID = new Guid("34e0c846-7774-4788-bbda-6d06590078cc"), Hide = false, Name = "PENOLA" },
                        new { ID = new Guid("d302f55d-7fe9-48c4-a8ca-5add00ad9264"), Hide = false, Name = "ARARAT" },
                        new { ID = new Guid("9121a4bc-494f-4fc3-96a2-07541b0b5707"), Hide = false, Name = "BENDIGO" }
                    );
                });

            modelBuilder.Entity("livestock.Models.MarketBuy", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AgentID");

                    b.Property<string>("CodeDesc");

                    b.Property<int?>("Number");

                    b.Property<decimal?>("Price");

                    b.Property<Guid>("StockPurchaseID");

                    b.Property<Guid?>("TypeOfAnimalID");

                    b.HasKey("ID");

                    b.HasIndex("StockPurchaseID");

                    b.HasIndex("TypeOfAnimalID");

                    b.ToTable("MarketBuys");
                });

            modelBuilder.Entity("livestock.Models.MarketBuySummary", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AvPrice");

                    b.Property<decimal?>("AvWeight");

                    b.Property<decimal?>("CostXKg");

                    b.Property<string>("Description");

                    b.Property<decimal?>("Freight");

                    b.Property<int>("Number");

                    b.Property<decimal?>("Skin");

                    b.Property<Guid>("StockPurchaseID");

                    b.Property<Guid?>("TypeOfAnimalID");

                    b.HasKey("ID");

                    b.HasIndex("StockPurchaseID");

                    b.HasIndex("TypeOfAnimalID");

                    b.ToTable("MarketBuySummaries");
                });

            modelBuilder.Entity("livestock.Models.PricePerHeadBuy", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Freight");

                    b.Property<int?>("HeadsBought");

                    b.Property<decimal?>("Price");

                    b.Property<decimal?>("Skin");

                    b.Property<Guid>("StockPurchaseID");

                    b.Property<Guid?>("TypeOfAnimalID");

                    b.Property<decimal?>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("StockPurchaseID");

                    b.HasIndex("TypeOfAnimalID");

                    b.ToTable("PricePerHeadBuy");
                });

            modelBuilder.Entity("livestock.Models.StockPurchase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AgentID");

                    b.Property<Guid>("BuyTypeID");

                    b.Property<Guid>("BuyerID");

                    b.Property<string>("BuyerNo");

                    b.Property<string>("ContactFax");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactPhone");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("DateDelivered");

                    b.Property<decimal?>("EstimatedWeight");

                    b.Property<decimal?>("Freight");

                    b.Property<DateTime>("IntendedDeliveryDate");

                    b.Property<bool>("InvoiceRecD");

                    b.Property<Guid>("LocationID");

                    b.Property<int?>("Number");

                    b.Property<int>("NumberDelivered");

                    b.Property<decimal?>("Price");

                    b.Property<Guid>("TransportID");

                    b.Property<Guid?>("TypeOfAnimalID");

                    b.Property<Guid?>("VendorID");

                    b.Property<string>("VendorName");

                    b.Property<decimal?>("WCl10Price");

                    b.Property<decimal?>("WCl11Price");

                    b.Property<decimal?>("WCl12Price");

                    b.Property<decimal?>("WCl1Price");

                    b.Property<decimal?>("WCl2Price");

                    b.Property<decimal?>("WCl3Price");

                    b.Property<decimal?>("WCl4Price");

                    b.Property<decimal?>("WCl5Price");

                    b.Property<decimal?>("WCl6Price");

                    b.Property<decimal?>("WCl7Price");

                    b.Property<decimal?>("WCl8Price");

                    b.Property<decimal?>("WCl9Price");

                    b.Property<int>("YTBDelivered");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.HasIndex("BuyTypeID");

                    b.HasIndex("BuyerID");

                    b.HasIndex("LocationID");

                    b.HasIndex("TransportID");

                    b.HasIndex("TypeOfAnimalID");

                    b.HasIndex("VendorID");

                    b.ToTable("StockPurchase");
                });

            modelBuilder.Entity("livestock.Models.Transport", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Hide");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Transport");

                    b.HasData(
                        new { ID = new Guid("c0f792a2-b10a-43d8-a760-222752bf15a7"), Hide = false, Name = "O'SULLIVANS" },
                        new { ID = new Guid("5938b059-ad03-48f7-95ba-ca9c6c7e5f2e"), Hide = false, Name = "O'T" },
                        new { ID = new Guid("c3741149-1f3a-4021-8fae-7e1a6e323667"), Hide = false, Name = "PAGE" },
                        new { ID = new Guid("d5280ba4-f927-4a4e-a7d1-7254f6758140"), Hide = false, Name = "STEVENS" }
                    );
                });

            modelBuilder.Entity("livestock.Models.TypeOfAnimal", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TypeOfAnimals");

                    b.HasData(
                        new { ID = new Guid("1550b1b3-43aa-4df8-9a21-a604a160807f"), Name = "MUTTON" },
                        new { ID = new Guid("47272a57-5ce8-4663-9b55-3c881e399e0e"), Name = "LAMBS" },
                        new { ID = new Guid("2c070ea8-4948-4cec-b6c4-dac09dd9b4de"), Name = "RAMS" },
                        new { ID = new Guid("7a773a9b-025c-4400-b0d8-2eaecdd87068"), Name = "2 TOOTHS" },
                        new { ID = new Guid("8c9f5370-d15e-4876-9c34-2223734d9ab5"), Name = "GOATS" }
                    );
                });

            modelBuilder.Entity("livestock.Models.UserOpenInvitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.HasKey("Id");

                    b.ToTable("UserOpenInvitations");

                    b.HasData(
                        new { Id = new Guid("d5280ba4-f927-4a4e-a7d1-7254f6758140"), Email = "feliceferri@gmail.com" }
                    );
                });

            modelBuilder.Entity("livestock.Models.Vendor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("livestock.Models.Weight", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("WeightSheetID");

                    b.Property<decimal>("weight");

                    b.HasKey("ID");

                    b.HasIndex("WeightSheetID");

                    b.ToTable("Weights");
                });

            modelBuilder.Entity("livestock.Models.WeightSheet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime>("Date");

                    b.Property<int>("LotNumber");

                    b.Property<string>("Origin");

                    b.Property<decimal>("Skin");

                    b.Property<Guid>("StockPurchaseID");

                    b.Property<decimal>("WeightOff");

                    b.HasKey("ID");

                    b.HasIndex("StockPurchaseID")
                        .IsUnique();

                    b.ToTable("WeightSheet");
                });

            modelBuilder.Entity("LiveStok.Helpers.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsAdministrator");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("livestock.Models.MarketBuy", b =>
                {
                    b.HasOne("livestock.Models.StockPurchase", "StockPurchase")
                        .WithMany("MarketBuys")
                        .HasForeignKey("StockPurchaseID")
                        .HasConstraintName("FK_MarketBuy_StockPurchase")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.TypeOfAnimal", "TypeOfAnimal")
                        .WithMany()
                        .HasForeignKey("TypeOfAnimalID");
                });

            modelBuilder.Entity("livestock.Models.MarketBuySummary", b =>
                {
                    b.HasOne("livestock.Models.StockPurchase", "stockPurchase")
                        .WithMany("MarketBuySummaries")
                        .HasForeignKey("StockPurchaseID")
                        .HasConstraintName("FK_MarketBuySummary_StockPurchase")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.TypeOfAnimal", "TypeOfAnimal")
                        .WithMany()
                        .HasForeignKey("TypeOfAnimalID");
                });

            modelBuilder.Entity("livestock.Models.PricePerHeadBuy", b =>
                {
                    b.HasOne("livestock.Models.StockPurchase", "StockPurchase")
                        .WithMany("PricePerHeadBuys")
                        .HasForeignKey("StockPurchaseID")
                        .HasConstraintName("FK_PricePerHeadBuy_StockPurchase")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.TypeOfAnimal", "TypeOfAnimal")
                        .WithMany("PricePerHeadBuys")
                        .HasForeignKey("TypeOfAnimalID")
                        .HasConstraintName("FK_PricePerHeadBuy_TypeOfAnimal");
                });

            modelBuilder.Entity("livestock.Models.StockPurchase", b =>
                {
                    b.HasOne("livestock.Models.Agent", "Agent")
                        .WithMany("StockPurchase")
                        .HasForeignKey("AgentID")
                        .HasConstraintName("FK_StockPurchase_Agent")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.BuyType", "BuyType")
                        .WithMany("StockPurchases")
                        .HasForeignKey("BuyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.Buyer", "Buyer")
                        .WithMany("StockPurchase")
                        .HasForeignKey("BuyerID")
                        .HasConstraintName("FK_StockPurchase_Buyer")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.Location", "Location")
                        .WithMany("StockPurchase")
                        .HasForeignKey("LocationID")
                        .HasConstraintName("FK_StockPurchase_Location")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.Transport", "Transport")
                        .WithMany("StockPurchase")
                        .HasForeignKey("TransportID")
                        .HasConstraintName("FK_StockPurchase_Transport")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("livestock.Models.TypeOfAnimal", "TypeOfAnimal")
                        .WithMany("StockPurchase")
                        .HasForeignKey("TypeOfAnimalID")
                        .HasConstraintName("FK_StockPurchase_TypeOfAnimal");

                    b.HasOne("livestock.Models.Vendor")
                        .WithMany("StockPurchase")
                        .HasForeignKey("VendorID");
                });

            modelBuilder.Entity("livestock.Models.Weight", b =>
                {
                    b.HasOne("livestock.Models.WeightSheet", "weightSheet")
                        .WithMany("Weights")
                        .HasForeignKey("WeightSheetID")
                        .HasConstraintName("FK_Weight_WeightSheet")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("livestock.Models.WeightSheet", b =>
                {
                    b.HasOne("livestock.Models.StockPurchase", "StockPurchase")
                        .WithOne("WeightSheet")
                        .HasForeignKey("livestock.Models.WeightSheet", "StockPurchaseID")
                        .HasConstraintName("FK_StockPurchase_WeightSheet")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LiveStok.Helpers.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LiveStok.Helpers.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LiveStok.Helpers.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LiveStok.Helpers.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
